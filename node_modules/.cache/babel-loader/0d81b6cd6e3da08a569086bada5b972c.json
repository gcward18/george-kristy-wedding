{"ast":null,"code":"import app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID\n};\n\nclass Firebase {\n  constructor() {\n    this.doCreateUserWithEmailAndPassword = (email, password) => this.auth.createUserWithEmailAndPassword(email, password);\n\n    this.doSignInWithEmailAndPassword = (email, password) => this.auth.signInWithEmailAndPassword(email, password);\n\n    this.doSignOut = () => this.auth.signOut();\n\n    this.doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    this.doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n    this.addAttendant = (name, num_party, attending, notes) => this.db.collection(\"attendants\").doc(name).set({\n      name: name,\n      num_party: num_party,\n      attending: attending,\n      notes: notes\n    }).then(() => {\n      setTimeout(() => {\n        window.alert(name, \" Successfuly written!\");\n      });\n    }).catch(error => {\n      setTimeout(() => {\n        window.alert(\"Error writing doc: \", error);\n      }, 30000);\n    });\n\n    this.user = uid => this.db.ref(\"users/\".concat(uid));\n\n    this.users = () => this.db.ref('users');\n\n    app.initializeApp(config);\n    this.auth = app.auth();\n    this.db = app.firestore();\n  } // *** Auth API ***\n\n\n}\n\nexport default Firebase;","map":{"version":3,"sources":["/home/george/Desktop/websites/george-kristy-wedding-registry/src/components/Firebase/firebase.js"],"names":["app","config","apiKey","process","env","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","Firebase","constructor","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","addAttendant","name","num_party","attending","notes","db","collection","doc","set","then","setTimeout","window","alert","catch","error","user","uid","ref","users","initializeApp","firestore"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAO,eAAP;AACA,OAAO,oBAAP;AACA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,iBADT;AAEXC,EAAAA,UAAU,EAAEH,OAAO,CAACC,GAAR,CAAYG,qBAFb;AAGXC,EAAAA,WAAW,EAAEL,OAAO,CAACC,GAAR,CAAYK,sBAHd;AAIXC,EAAAA,SAAS,EAAEP,OAAO,CAACC,GAAR,CAAYO,oBAJZ;AAKXC,EAAAA,aAAa,EAAET,OAAO,CAACC,GAAR,CAAYS,wBALhB;AAMXC,EAAAA,iBAAiB,EAAEX,OAAO,CAACC,GAAR,CAAYW;AANpB,CAAf;;AAQA,MAAMC,QAAN,CAAe;AACXC,EAAAA,WAAW,GAAG;AAAA,SAMhBC,gCANgB,GAMmB,CAACC,KAAD,EAAQC,QAAR,KACjC,KAAKC,IAAL,CAAUC,8BAAV,CAAyCH,KAAzC,EAAgDC,QAAhD,CAPc;;AAAA,SAQhBG,4BARgB,GAQe,CAACJ,KAAD,EAAQC,QAAR,KAC7B,KAAKC,IAAL,CAAUG,0BAAV,CAAqCL,KAArC,EAA4CC,QAA5C,CATc;;AAAA,SAUhBK,SAVgB,GAUJ,MAAM,KAAKJ,IAAL,CAAUK,OAAV,EAVF;;AAAA,SAWhBC,eAXgB,GAWER,KAAK,IAAI,KAAKE,IAAL,CAAUO,sBAAV,CAAiCT,KAAjC,CAXX;;AAAA,SAYhBU,gBAZgB,GAYGT,QAAQ,IACzB,KAAKC,IAAL,CAAUS,WAAV,CAAsBC,cAAtB,CAAqCX,QAArC,CAbc;;AAAA,SAehBY,YAfgB,GAeD,CAACC,IAAD,EAAOC,SAAP,EAAkBC,SAAlB,EAA6BC,KAA7B,KAAuC,KAAKC,EAAL,CAAQC,UAAR,CAAmB,YAAnB,EAAiCC,GAAjC,CAAqCN,IAArC,EAA2CO,GAA3C,CAA+C;AACnGP,MAAAA,IAAI,EAAEA,IAD6F;AAEnGC,MAAAA,SAAS,EAAEA,SAFwF;AAGnGC,MAAAA,SAAS,EAAEA,SAHwF;AAInGC,MAAAA,KAAK,EAAEA;AAJ4F,KAA/C,EAKnDK,IALmD,CAK9C,MAAM;AACZC,MAAAA,UAAU,CAAC,MAAM;AAACC,QAAAA,MAAM,CAACC,KAAP,CAAaX,IAAb,EAAmB,uBAAnB;AAA4C,OAApD,CAAV;AACD,KAPqD,EAOnDY,KAPmD,CAO7CC,KAAK,IAAI;AAChBJ,MAAAA,UAAU,CAAC,MAAM;AAACC,QAAAA,MAAM,CAACC,KAAP,CAAa,qBAAb,EAAoCE,KAApC;AAA2C,OAAnD,EAAqD,KAArD,CAAV;AACD,KATqD,CAftC;;AAAA,SA0BhBC,IA1BgB,GA0BTC,GAAG,IAAI,KAAKX,EAAL,CAAQY,GAAR,iBAAqBD,GAArB,EA1BE;;AAAA,SA2BhBE,KA3BgB,GA2BR,MAAM,KAAKb,EAAL,CAAQY,GAAR,CAAY,OAAZ,CA3BE;;AACVjD,IAAAA,GAAG,CAACmD,aAAJ,CAAkBlD,MAAlB;AACA,SAAKoB,IAAL,GAAYrB,GAAG,CAACqB,IAAJ,EAAZ;AACA,SAAKgB,EAAL,GAAUrC,GAAG,CAACoD,SAAJ,EAAV;AACH,GALU,CAMb;;;AANa;;AA8Bf,eAAepC,QAAf","sourcesContent":["import app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nconst config = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  };\nclass Firebase {\n    constructor() {\n        app.initializeApp(config);\n        this.auth = app.auth();\n        this.db = app.firestore();\n    }\n  // *** Auth API ***\n  doCreateUserWithEmailAndPassword = (email, password) =>\n    this.auth.createUserWithEmailAndPassword(email, password);\n  doSignInWithEmailAndPassword = (email, password) =>\n    this.auth.signInWithEmailAndPassword(email, password);\n  doSignOut = () => this.auth.signOut();\n  doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n  doPasswordUpdate = password =>\n    this.auth.currentUser.updatePassword(password);\n\n  addAttendant = (name, num_party, attending, notes) => this.db.collection(\"attendants\").doc(name).set({\n    name: name,\n    num_party: num_party,\n    attending: attending,\n    notes: notes,\n  }).then(() => {\n    setTimeout(() => {window.alert(name, \" Successfuly written!\")});\n  }).catch(error => {\n    setTimeout(() => {window.alert(\"Error writing doc: \", error)}, 30000);\n  });\n  // *** User API ***\n  user = uid => this.db.ref(`users/${uid}`);\n  users = () => this.db.ref('users');\n}\nexport default Firebase;"]},"metadata":{},"sourceType":"module"}